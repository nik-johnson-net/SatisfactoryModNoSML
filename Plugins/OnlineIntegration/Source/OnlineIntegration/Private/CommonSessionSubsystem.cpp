// This file has been automatically generated by the Unreal Header Implementation tool

#include "CommonSessionSubsystem.h"

FString FCommonSessionCreationSettings::GetMapName() const{ return FString(); }
FString FCommonSessionCreationSettings::ConstructTravelURL() const{ return FString(); }
USessionMigrationSequence* UCommonSessionSubsystem::CreateSessionCreationSequence(const FCommonSessionCreationSettings &SessionSettings, TScriptInterface<ISessionCreationInteractionHandler> InteractionHandler){ return nullptr; }
USessionMigrationSequence* UCommonSessionSubsystem::CreateSessionJoiningSequence(APlayerController* Player, FCommonSession Session){ return nullptr; }
void UCommonSessionSubsystem::CleanUpSessions(){ }
void UCommonSessionSubsystem::InviteFriendToGameSession(const UOnlineFriend* OnlineFriend){ }
void UCommonSessionSubsystem::RespondToGameInvite(APlayerController* Player, UOnlineFriend* OnlineFriend, bool bAccept){ }
void UCommonSessionSubsystem::JoinFriendGame(APlayerController* Player, UOnlineFriend* OnlineFriend){ }
void UCommonSessionSubsystem::FetchSessionById(APlayerController* Player, const FString& SessionId, FOnFindSessionByIdSessionComplete OnComplete){ }
TFuture<UE::Online::TOnlineResult<UE::Online::FFindSessions>> UCommonSessionSubsystem::FindSessions(UE::Online::FFindSessions::Params&& Params, EOnlineIntegrationUnmappedContext Context){ return TFuture<UE::Online::TOnlineResult<UE::Online::FFindSessions>>(); }
TFuture<UE::Online::TOnlineResult<UE::Online::FJoinSession>> UCommonSessionSubsystem::JoinSession(UE::Online::FJoinSession::Params&& Params, EOnlineIntegrationUnmappedContext Context){ return TFuture<UE::Online::TOnlineResult<UE::Online::FJoinSession>>(); }
void UCommonSessionSubsystem::LeaveSession(ULocalUserInfo* UserInfo, FName SessionName){ }
TFuture<UE::Online::TOnlineResult<UE::Online::FLeaveSession>> UCommonSessionSubsystem::LeaveSession(UE::Online::FLeaveSession::Params&& Params, EOnlineIntegrationUnmappedContext Context){ return TFuture<UE::Online::TOnlineResult<UE::Online::FLeaveSession>>(); }
UE::Online::TOnlineResult<UE::Online::FGetSessionByName> UCommonSessionSubsystem::GetSessionByName(UE::Online::FGetSessionByName::Params&& Params, EOnlineIntegrationUnmappedContext Context){ return UE::Online::TOnlineResult<UE::Online::FGetSessionByName>({ TSharedPtr<UE::Online::ISession>().ToSharedRef() }); }
TFuture<UE::Online::TOnlineResult<UE::Online::FUpdateSessionSettings>> UCommonSessionSubsystem::UpdateSessionSettings(UE::Online::FUpdateSessionSettings::Params&& Params, EOnlineIntegrationUnmappedContext Context){ return TFuture<UE::Online::TOnlineResult<UE::Online::FUpdateSessionSettings>>(); }
UE::Online::FOnlineSessionId UCommonSessionSubsystem::MakeOnlineSessionId(const FString& SessionIdString, EOnlineIntegrationUnmappedContext Context){ return UE::Online::FOnlineSessionId(); }
FString UCommonSessionSubsystem::OnlineSessionIdToString(UE::Online::FOnlineSessionId SessionId){ return FString(); }
TFuture<UE::Online::TOnlineResult<UE::Online::FLeaveSession>> UCommonSessionSubsystem::DestroySession(ULocalUserInfo* LocalUserInfo, FName SessionName, EOnlineIntegrationUnmappedContext Context){ return TFuture<UE::Online::TOnlineResult<UE::Online::FLeaveSession>>(); }
TFuture<UE::Online::TOnlineResult<UE::Online::FCreateSession>> UCommonSessionSubsystem::CreateSession(ULocalUserInfo* LocalUserInfo, FName SessionName, EOnlineIntegrationUnmappedContext Context, const FCommonSessionCreationSettings& Settings){ return TFuture<UE::Online::TOnlineResult<UE::Online::FCreateSession>>(); }
TFuture<UE::Online::TOnlineResult<UE::Online::FAddSessionMember>> UCommonSessionSubsystem::AddSessionMember(UE::Online::FAccountId User, FName SessionName){ return TFuture<UE::Online::TOnlineResult<UE::Online::FAddSessionMember>>(); }
TFuture<UE::Online::TOnlineResult<UE::Online::FRemoveSessionMember>> UCommonSessionSubsystem::RemoveSessionMember(UE::Online::FAccountId User, FName SessionName){ return TFuture<UE::Online::TOnlineResult<UE::Online::FRemoveSessionMember>>(); }
FString UCommonSessionSubsystem::GetStringAttributeFromSession(const FCommonSession& Session, FName Key) const{ return FString(); }
int64 UCommonSessionSubsystem::GetIntAttributeFromSession(const FCommonSession& Session, FName Key) const{ return int64(); }
double UCommonSessionSubsystem::GetDoubleAttributeFromSession(const FCommonSession& Session, FName Key) const{ return double(); }
bool UCommonSessionSubsystem::GetBoolAttributeFromSession(const FCommonSession& Session, FName Key) const{ return bool(); }
bool UCommonSessionSubsystem::IsValidSession(const FCommonSession& Session){ return bool(); }
TSharedPtr<const UE::Online::ISession> UCommonSessionSubsystem::GetSession(const FCommonSession& SessionHandle) const{ return TSharedPtr<const UE::Online::ISession>(); }
FDelegateHandle UCommonSessionSubsystem::AddOnSessionUpdateReceivedDelegate(const FOnCommonSessionUpdateReceived::FDelegate& Delegate){ return FDelegateHandle(); }
void UCommonSessionSubsystem::RemoveSessionUpdateReceivedDelegate(FDelegateHandle Handle){ }
void UCommonSessionSubsystem::JoinStartupSession(ULocalUserInfo* LocalUserInfo, FName SessionName){ }
void UCommonSessionSubsystem::Initialize(FSubsystemCollectionBase& Collection){ }
void UCommonSessionSubsystem::Deinitialize(){ }
void UCommonSessionSubsystem::HandleSessionUpdated(const UE::Online::FSessionUpdated& SessionUpdated, EOnlineIntegrationUnmappedContext Context) const{ }
void UCommonSessionSubsystem::TravelLocalSessionFailure(UWorld* World, ETravelFailure::Type FailureType, const FString& ReasonString){ }
void UCommonSessionSubsystem::HandlePostLoadMap(UWorld* World){ }
void UCommonSessionSubsystem::OnOnlineContextCreated(){ }
UE::Online::ISessionsPtr UCommonSessionSubsystem::GetSessionsInterface(EOnlineIntegrationUnmappedContext Context) const{ return UE::Online::ISessionsPtr(); }
UE::Online::FAccountId UCommonSessionSubsystem::GetAccountId(APlayerController* PlayerController) const{ return UE::Online::FAccountId(); }
void UCommonSessionSubsystem::UpdatePresencePostLoadMap(UWorld* World){ }
void UCommonSessionStatics::FetchFriendSession( UOnlineFriend* Friend, const FOnFetchFriendSessionComplete& CompletionDelegate){ }
USessionMigrationSequence* UCommonSessionStatics::JoinSession(APlayerController* PlayerController, const FCommonSession& Session){ return nullptr; }
